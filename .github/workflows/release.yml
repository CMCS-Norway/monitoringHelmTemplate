name: Release Helm Chart

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Update Helm dependencies
        run: |
          helm dependency update

      - name: Lint Helm chart
        run: |
          helm lint .

      - name: Template Helm chart
        run: |
          helm template monitoring-stack . --debug > /tmp/rendered.yaml
          echo "Chart rendered successfully"

      - name: Validate rendered YAML
        run: |
          pip install yamllint
          yamllint -d '{extends: relaxed, rules: {line-length: {max: 120}, trailing-spaces: disable, indentation: disable}}' /tmp/rendered.yaml || echo "YAML validation completed"

  release:
    needs: lint-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Install chart-releaser
        run: |
          # Download and extract in /tmp to avoid polluting the chart directory
          cd /tmp
          wget https://github.com/helm/chart-releaser/releases/download/v1.6.1/chart-releaser_1.6.1_linux_amd64.tar.gz
          tar -xzf chart-releaser_1.6.1_linux_amd64.tar.gz
          sudo mv cr /usr/local/bin/cr
          cd -

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION"

      - name: Update Chart.yaml version
        run: |
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.version }}/" Chart.yaml
          echo "Updated Chart.yaml:"
          cat Chart.yaml | grep "version:"

      - name: Update Helm dependencies
        run: |
          helm dependency update

      - name: Package Helm chart
        run: |
          mkdir -p .cr-release-packages
          helm package . --destination .cr-release-packages

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHART_NAME="monitoring-stack"
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_FILE=".cr-release-packages/${CHART_NAME}-${VERSION}.tgz"

          # Create release notes
          cat > release-notes.md <<EOF
          ## Helm Chart Release ${VERSION}

          ### Installation
          \`\`\`bash
          helm repo add monitoring-stack https://cmcs-norway.github.io/monitoringHelmTemplate
          helm repo update
          helm install my-monitoring monitoring-stack/monitoring-stack --version ${VERSION}
          \`\`\`

          ### Chart Package
          The chart package is attached to this release.
          EOF

          # Create GitHub release with the chart package
          gh release create "v${VERSION}" \
            --title "monitoring-stack v${VERSION}" \
            --notes-file release-notes.md \
            "${PACKAGE_FILE}"

      - name: Checkout gh-pages branch
        run: |
          # Stash any changes from the release process
          git stash --include-untracked || true

          # Fetch and checkout gh-pages
          git fetch origin gh-pages || git checkout --orphan gh-pages
          git checkout gh-pages || git checkout --orphan gh-pages

      - name: Update Helm repository index
        run: |
          # Create clean directory for packages
          rm -rf .cr-release-packages
          mkdir -p .cr-release-packages

          # Copy existing index from gh-pages if it exists
          if [ -f index.yaml ]; then
            cp index.yaml .cr-release-packages/index.yaml
          fi

          # Get the chart package from the release
          VERSION="${{ steps.version.outputs.version }}"
          CHART_NAME="monitoring-stack"
          PACKAGE_FILE="${CHART_NAME}-${VERSION}.tgz"

          # Download the package from the GitHub release
          gh release download "v${VERSION}" --pattern "${PACKAGE_FILE}" --dir .cr-release-packages

          # Update the index
          cr index \
            --owner CMCS-Norway \
            --git-repo monitoringHelmTemplate \
            --release-name-template "v{{ .Version }}" \
            --index-path .cr-release-packages/index.yaml \
            --package-path .cr-release-packages \
            --push false

          # Move the new index to root
          mv .cr-release-packages/index.yaml index.yaml
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit and push index
        run: |
          # Stash any uncommitted changes before pulling
          git stash --include-untracked || true

          # Pull latest changes to avoid conflicts
          git pull origin gh-pages --rebase || true

          # Restore stashed changes
          git stash pop || true

          # Add and commit the updated index
          git add index.yaml
          git commit -m "Update Helm repository index for v${{ steps.version.outputs.version }}" || echo "No changes to commit"

          # Push to gh-pages
          git push origin gh-pages
